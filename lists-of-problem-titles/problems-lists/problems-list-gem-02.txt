"Variables and Data Types (int, double, String, bool, List, Map)\nSimple Interest Calculator:\nDeclare variables for principal (double), rate (double), and time (int). Calculate the simple interest using the formula `Interest = (Principal * Rate * Time) / 100`. Store the result in a variable and print it with a descriptive message.",
"Variables and Data Types (int, double, String, bool, List, Map)\nUser Profile:\nCreate variables to store a user's name (String), age (int), height (double, in meters), and if they are a subscriber (bool). Print out each piece of information on a separate line with a label.",
"Variables and Data Types (int, double, String, bool, List, Map)\nFavorite Hobbies List:\nCreate a List<String> to store your favorite hobbies. Add at least three hobbies. Print the number of hobbies in the list. Access and print the second hobby in the list.",
"Variables and Data Types (int, double, String, bool, List, Map)\nStudent Score Map:\nCreate a Map<String, int> to store student names (keys) and their scores (values). Add three students and their scores. Retrieve and print the score of a specific student by name. Print the entire map.",
"Variables and Data Types (int, double, String, bool, List, Map)\nBasic String Concatenation:\nDeclare two String variables, one for a first name and one for a last name. Concatenate them with a space in between to create a full name. Store the result in a new String variable and print the full name.",
"Operators (arithmetic, comparison, logical)\nRectangle Area and Perimeter:\nDeclare variables for the length and width of a rectangle (use int or double). Calculate the area (`length * width`) and perimeter (`2 * (length + width)`) using arithmetic operators. Print both results.",
"Operators (arithmetic, comparison, logical)\nAge Eligibility Check:\nDeclare an integer variable for age. Use comparison operators (`>=`, `<`) to check if the age is 18 or older. Print a boolean result indicating eligibility (true if 18+, false otherwise).",
"Operators (arithmetic, comparison, logical)\nDiscount Eligibility:\nDeclare variables for age (int) and whether the person is a student (bool). Use logical operators (`||`, `&&`) to determine if they get a discount (eligible if age < 18 OR isStudent is true). Print the boolean result.",
"Operators (arithmetic, comparison, logical)\nEven or Odd Number Check:\nDeclare an integer variable. Use the modulo operator (`%`) and the equality operator (`==`) to check if the number is even (`number % 2 == 0`). Print a message indicating whether the number is even or odd.",
"Operators (arithmetic, comparison, logical)\nIncrement/Decrement Counter:\nDeclare an integer variable `counter` initialized to 0. Use the increment operator (`++` or `+= 1`) five times and the decrement operator (`--` or `-= 1`) two times. Print the final value of the counter.",
"Control Flow (if-else, for loops, while loops, switch statements)\nPositive, Negative, or Zero:\nDeclare an integer variable. Use if-else if-else statements to check if the number is positive, negative, or zero. Print the corresponding message.",
"Control Flow (if-else, for loops, while loops, switch statements)\nPrint Numbers 1 to N:\nDeclare an integer variable `n`. Use a `for` loop to print all the numbers from 1 up to and including `n`.",
"Control Flow (if-else, for loops, while loops, switch statements)\nCountdown Timer:\nUse a `while` loop to count down from 10 to 1. Print each number on a new line. After the loop finishes, print \"Blast off!\".",
"Control Flow (if-else, for loops, while loops, switch statements)\nTraffic Light Simulation:\nDeclare a String variable `lightColor` (e.g., \"red\", \"yellow\", \"green\"). Use a `switch` statement to print the action to take based on the color (\"Stop\", \"Caution\", \"Go\"). Include a default case for invalid colors.",
"Control Flow (if-else, for loops, while loops, switch statements)\nSum of Even Numbers in a List:\nCreate a List<int> with several numbers. Use a `for` loop (or `for-in` loop) and an `if` statement inside it to find the sum of only the even numbers in the list. Print the final sum.",
"Functions (parameters, return values)\nGreeting Function:\nDefine a function `printGreeting` that takes a `name` (String) as a parameter and prints a personalized greeting like \"Hello, [name]!\". Call this function with a sample name.",
"Functions (parameters, return values)\nMultiplication Function:\nDefine a function `multiply` that takes two `double` parameters (`num1`, `num2`) and returns their product. Call the function with sample numbers and print the returned result.",
"Functions (parameters, return values)\nisPositive Function:\nDefine a function `isPositive` that takes an `int` parameter and returns a `bool` (`true` if the number is greater than 0, `false` otherwise). Call the function with a positive and a negative number and print the results.",
"Functions (parameters, return values)\nList Average Function:\nDefine a function `calculateAverage` that takes a `List<int>` as a parameter and returns the average (as a `double`) of the numbers in the list. Handle the case of an empty list (e.g., return 0). Call the function with a sample list and print the result.",
"Functions (parameters, return values)\nCombine Strings Function:\nDefine a function `combine` that takes two `String` parameters and a `separator` (String) parameter. Return a new String that consists of the first string, the separator, and the second string. Call the function and print the result.",
"Classes and Objects (inheritance, polymorphism)\nBasic `Person` Class:\nDefine a class `Person` with `name` (String) and `age` (int) properties. Add a constructor to initialize these properties. Add a method `introduce()` that prints \"Hi, my name is [name] and I am [age] years old.\". Create an instance of `Person` and call the `introduce()` method.",
"Classes and Objects (inheritance, polymorphism)\n`Rectangle` Class with Area Method:\nDefine a class `Rectangle` with `width` and `height` (double) properties and a constructor. Add a method `calculateArea()` that returns the area (`width * height`). Create an instance of `Rectangle` and print its area by calling the method.",
"Classes and Objects (inheritance, polymorphism)\n`Animal` Inheritance:\nCreate a base class `Animal` with a method `speak()`. Create a `Dog` class that inherits from `Animal` and overrides `speak()` to print \"Woof!\". Create a `Cat` class that inherits from `Animal` and overrides `speak()` to print \"Meow!\". Create instances of `Dog` and `Cat` and call their `speak()` methods.",
"Classes and Objects (inheritance, polymorphism)\nPolymorphic Animal List:\nUsing the `Animal`, `Dog`, and `Cat` classes from the previous exercise, create a `List<Animal>`. Add instances of `Dog` and `Cat` to the list. Iterate through the list using a loop and call the `speak()` method on each element, demonstrating polymorphism.",
"Classes and Objects (inheritance, polymorphism)\n`BankAccount` Class:\nDefine a class `BankAccount` with a private `_balance` (double) property initialized via a constructor. Add public methods `deposit(double amount)` and `withdraw(double amount)` that modify the balance (ensure withdrawal doesn't result in a negative balance). Add a public getter method `getBalance()` that returns the current balance. Create an instance, perform some deposits/withdrawals, and print the final balance.",
"Asynchronous Programming (Futures, async/await)\nDelayed Greeting:\nUse `Future.delayed` with a duration of 2 seconds. Provide a function to the `Future` that returns a greeting String (e.g., \"Hello after 2 seconds!\"). Use `.then()` to print the greeting when the Future completes.",
"Asynchronous Programming (Futures, async/await)\nSimulate Data Fetch with async/await:\nCreate an `async` function `fetchUserData()` that simulates fetching data by using `Future.delayed` for 3 seconds and then returns a simple Map (e.g., `{'name': 'Alice', 'id': 123}`). In your `main` function (marked `async`), call `fetchUserData()` using `await` and print the returned map.",
"Asynchronous Programming (Futures, async/await)\nFetch Weather Simulation:\nCreate an `async` function `getWeatherReport()` that uses `Future.delayed` for 1 second and returns a String (e.g., \"Sunny, 25 degrees Celsius\"). Use `await` to call this function and print the weather report.",
"Asynchronous Programming (Futures, async/await)\nAsync Function with Error Handling:\nCreate an `async` function `fetchDataWithError()` that simulates a network request. Use `Future.delayed` and sometimes return a String \"Data fetched successfully\", but sometimes throw an `Exception('Network error')`. Call this function using `await` inside a `try-catch` block in `main` (or another `async` function) to handle both success and error outcomes appropriately.",
"Asynchronous Programming (Futures, async/await)\nWaiting for Multiple Futures:\nCreate two separate `async` functions, `fetchUserProfile()` and `fetchUserPosts()`, each simulating a delay and returning some data (e.g., a String or Map). Use `Future.wait` to run both futures concurrently and wait for both to complete. Print the results from both futures once they are available."