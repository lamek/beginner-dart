Okay, here are 5 beginner exercise ideas for each category in the requested format for Dart:

"Variables and Data Types (int, double, String, bool, List, Map)
Temperature Converter:
Create variables to store Celsius and Fahrenheit temperatures. Write code to convert between the two using the formula: F=(C*9/5)+32 and C=(F-32)*5/9. Print the results with appropriate labels.",
"Variables and Data Types (int, double, String, bool, List, Map)
Grocery List:
Create a List of grocery items (Strings). Add, remove, and update items in the list. Print the final grocery list.",
"Variables and Data Types (int, double, String, bool, List, Map)
Personal Profile:
Declare variables for name (String), age (int), height (double), and isStudent (bool). Assign values and print a formatted profile summary using these variables.",
"Variables and Data Types (int, double, String, bool, List, Map)
Simple Contact Book Entry:
Create a Map to store a single contact's information with keys like 'name', 'email', 'phone' (all Strings). Add data for one contact and print the value associated with the 'email' key.",
"Variables and Data Types (int, double, String, bool, List, Map)
Class Grades Average:
Create a List of student scores (int or double). Calculate the sum of the scores and then compute the average score. Print both the sum and the average.",
"Operators (arithmetic, comparison, logical)
Simple Calculator:
Take two numbers (int or double). Perform addition, subtraction, multiplication, and division using arithmetic operators. Print the results of each operation.",
"Operators (arithmetic, comparison, logical)
Age Check:
Define an age variable (int). Use comparison operators (`>=`, `<`) to check if the age is 18 or older. Print a boolean result indicating if the person is an adult.",
"Operators (arithmetic, comparison, logical)
Even or Odd Checker:
Take an integer input. Use the modulo operator (`%`) to determine if the number is even or odd. Print the result (e.g., "Number is even" or "Number is odd").",
"Operators (arithmetic, comparison, logical)
Login Eligibility:
Create two boolean variables: `hasUsername` and `hasPassword`. Use the logical AND operator (`&&`) to check if both are true. Print a message indicating if the user can log in.",
"Operators (arithmetic, comparison, logical)
Discount Eligibility:
Check if a customer's purchase amount (double) is greater than 50 OR if they have a membership (bool). Use the logical OR operator (`||`). Print whether they qualify for a discount.",
"Control Flow (if-else, for loops, while loops, switch statements)
Grade Classifier:
Take a student's numerical score (int). Use if-else if-else statements to classify the score into letter grades (e.g., >=90 is A, 80-89 is B, etc.). Print the corresponding letter grade.",
"Control Flow (if-else, for loops, while loops, switch statements)
Countdown Timer:
Take an integer `N`. Use a `while` loop to print numbers counting down from `N` to 1, then print "Blast off!".",
"Control Flow (if-else, for loops, while loops, switch statements)
Print List Items:
Create a `List` of Strings (e.g., names of fruits). Use a `for` loop (or `for-in` loop) to iterate through the list and print each item on a new line.",
"Control Flow (if-else, for loops, while loops, switch statements)
Day of the Week Printer:
Take an integer input from 1 to 7. Use a `switch` statement to print the corresponding day of the week (1 = Monday, 7 = Sunday). Include a `default` case for invalid input.",
"Control Flow (if-else, for loops, while loops, switch statements)
Sum of Even Numbers:
Take an integer `N`. Use a `for` loop to iterate from 1 to `N`. Inside the loop, use an `if` statement to check if the current number is even. If it is, add it to a running total. Print the final sum.",
"Functions (parameters, return values)
Greeting Function:
Create a function `greetUser` that takes a `String` name as a parameter and prints a personalized greeting like "Hello, [name]!". Call the function with a few different names.",
"Functions (parameters, return values)
Area Calculator Function:
Create a function `calculateRectangleArea` that takes `double width` and `double height` as parameters and *returns* the calculated area (width * height). Call the function and print the returned result.",
"Functions (parameters, return values)
Max Value Function:
Create a function `findMaximum` that takes two integers as parameters and *returns* the larger of the two. Call the function and print the result.",
"Functions (parameters, return values)
List Sum Function:
Create a function `sumList` that takes a `List<int>` as a parameter and *returns* the sum of all elements in the list. Call the function with a sample list and print the returned sum.",
"Functions (parameters, return values)
Boolean Check Function:
Create a function `isPositive` that takes an integer as a parameter and *returns* `true` if the number is greater than 0, and `false` otherwise. Call the function with positive, negative, and zero values, printing the results.",
"Classes and Objects (inheritance, polymorphism)
Simple `Car` Class:
Define a `Car` class with properties like `make` (String), `model` (String), and `year` (int). Add a constructor to initialize these properties. Add a method `displayInfo()` that prints the car's details. Create an instance (object) of `Car` and call `displayInfo()`.",
"Classes and Objects (inheritance, polymorphism)
`BankAccount` Class:
Create a `BankAccount` class with a `double balance` property (initialize to 0). Add methods `deposit(double amount)` and `withdraw(double amount)` that update the balance. Ensure withdrawal doesn't allow the balance to go below zero. Add a `getBalance()` method. Create an object, perform some transactions, and print the final balance.",
"Classes and Objects (inheritance, polymorphism)
Basic Inheritance (`Animal` -> `Dog`):
Create a base class `Animal` with a method `speak()` that prints a generic sound. Create a `Dog` class that `extends Animal`. Give the `Dog` class a `breed` property. Create a `Dog` object and call its `speak()` method.",
"Classes and Objects (inheritance, polymorphism)
Method Overriding (`Shape` -> `Circle`, `Square`):
Create a base class `Shape` with a method `calculateArea()` that returns 0.0. Create `Circle` (needs radius) and `Square` (needs side length) classes that `extends Shape`. *Override* `calculateArea()` in each subclass to return the correct area. Create instances of `Circle` and `Square` and print their areas.",
"Classes and Objects (inheritance, polymorphism)
`Book` Class with Constructor:
Define a `Book` class with `title` (String) and `author` (String) properties. Create a constructor that accepts the title and author as arguments and assigns them to the properties. Create a `Book` object using the constructor and print its title and author.",
"Asynchronous Programming (Futures, async/await)
Delayed Welcome Message:
Create an `async` function `fetchWelcomeMessage()` that uses `Future.delayed` for 3 seconds and then returns the String "Welcome to Dart Async!". Call this function using `await` in `main` (or another async function) and print the message.",
"Asynchronous Programming (Futures, async/await)
Simulate User Login:
Create an `async` function `loginUser(String username, String password)` that simulates a network call with `Future.delayed` (1 second). If username is "admin" and password is "123", return `Future<bool>.value(true)`, otherwise return `Future<bool>.value(false)`. Call this function with `await` and print "Login successful" or "Login failed".",
"Asynchronous Programming (Futures, async/await)
Fetch Multiple Data Sequentially:
Create two `async` functions, `fetchData1()` and `fetchData2()`, each using `Future.delayed` (e.g., 1 second and 2 seconds) and returning a String. In `main` (async), `await` `fetchData1()`, print its result, then `await` `fetchData2()` and print its result.",
"Asynchronous Programming (Futures, async/await)
Async Function with Error Handling:
Create an `async` function `fetchDataWithError()` that uses `Future.delayed` and then sometimes throws an exception (e.g., based on a random number or a flag). Call this function using `await` inside a `try-catch` block. Print the data if successful, or print an error message if caught.",
"Asynchronous Programming (Futures, async/await)
Simple Async Void Function:
Create an `async` function `savePreferences()` that simulates saving data with `Future.delayed` for 2 seconds but returns `Future<void>` (no specific value). Call this function using `await` and print a confirmation message ("Preferences saved!") *after* the await completes."