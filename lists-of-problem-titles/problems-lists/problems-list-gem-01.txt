"Variables and Data Types (int, double, String, bool, List, Map)\nTemperature Converter:\nCreate variables to store Celsius and Fahrenheit temperatures. Write code to convert between the two using the formula: F=(C*9/5)+32 and C=(F-32)*5/9. Print the results with appropriate labels.",
"Variables and Data Types (int, double, String, bool, List, Map)\nGrocery List:\nCreate a List of grocery items (Strings). Add, remove, and update items in the list. Print the final grocery list.",
"Variables and Data Types (int, double, String, bool, List, Map)\nPersonal Profile:\nCreate variables to store your name (String), age (int), height in meters (double), and whether you are a student (bool). Print a summary sentence combining these variables.",
"Variables and Data Types (int, double, String, bool, List, Map)\nSimple Contact Book:\nCreate a Map where keys are contact names (Strings) and values are phone numbers (Strings). Add a few contacts, retrieve a specific contact's number, and print the entire contact book.",
"Variables and Data Types (int, double, String, bool, List, Map)\nAverage Score Calculator:\nCreate a List of scores (doubles or ints). Calculate the sum of the scores and the average score. Print both the sum and the average.",
"Operators (arithmetic, comparison, logical)\nSimple Calculator:\nTake two numbers as input. Perform addition, subtraction, multiplication, and division using arithmetic operators. Print the results of each operation.",
"Operators (arithmetic, comparison, logical)\nEven or Odd Checker:\nTake an integer as input. Use the modulo operator (%) to determine if the number is even or odd. Print the result (e.g., \"10 is even\").",
"Operators (arithmetic, comparison, logical)\nAge Eligibility Check:\nDefine a minimum voting age (int). Take a user's age as input. Use a comparison operator to determine if the user is eligible to vote. Print a boolean result (true or false).",
"Operators (arithmetic, comparison, logical)\nDiscount Applicator:\nTake a purchase total (double) and a boolean indicating if the user has a membership card. Apply a 10% discount if the total is over \$50 AND the user has a membership card. Print the final price.",
"Operators (arithmetic, comparison, logical)\nRectangle Area vs Perimeter:\nTake the length and width of a rectangle. Calculate both the area (length * width) and the perimeter (2 * (length + width)). Use a comparison operator to check if the area is greater than the perimeter. Print the area, perimeter, and the comparison result.",
"Control Flow (if-else, for loops, while loops, switch statements)\nGrade Classifier:\nTake a student's numerical grade (e.g., 0-100) as input. Use if-else if-else statements to classify the grade into categories (e.g., A: 90+, B: 80-89, C: 70-79, D: 60-69, F: <60). Print the corresponding letter grade.",
"Control Flow (if-else, for loops, while loops, switch statements)\nNumber Guessing Game (Simple):\nGenerate a secret number (e.g., between 1 and 10). Use a `while` loop to repeatedly ask the user for a guess until they guess correctly. Provide feedback (\"Too high\", \"Too low\", \"Correct!\").",
"Control Flow (if-else, for loops, while loops, switch statements)\nPrint Even Numbers:\nUse a `for` loop to iterate through numbers from 1 to 20. Inside the loop, use an `if` statement and the modulo operator (%) to check if a number is even. Print only the even numbers.",
"Control Flow (if-else, for loops, while loops, switch statements)\nSimple Menu (Switch):\nPresent a simple menu with options (e.g., 1: View Profile, 2: Edit Profile, 3: Exit). Take the user's choice as input (int). Use a `switch` statement to print a message corresponding to the chosen option, including a default case for invalid input.",
"Control Flow (if-else, for loops, while loops, switch statements)\nCountdown Timer:\nAsk the user for a starting number (int). Use a `while` or `for` loop to count down from that number to 1, printing each number. After the loop finishes, print \"Blast off!\".",
"Functions (parameters, return values)\nGreeting Function:\nCreate a function `greetUser` that takes a `name` (String) as a parameter and prints a personalized greeting like \"Hello, [name]!\". Call this function multiple times with different names.",
"Functions (parameters, return values)\nRectangle Area Function:\nCreate a function `calculateRectangleArea` that takes `width` and `height` (doubles) as parameters and *returns* the calculated area (double). Call the function with sample values and print the returned result.",
"Functions (parameters, return values)\nList Sum Function:\nCreate a function `sumList` that takes a `List<int>` as a parameter and *returns* the sum of all elements in the list. Call this function with a sample list and print the result.",
"Functions (parameters, return values)\nTemperature Conversion Functions:\nCreate two functions: `celsiusToFahrenheit` (takes Celsius, returns Fahrenheit) and `fahrenheitToCelsius` (takes Fahrenheit, returns Celsius). Use the formulas from the earlier exercise. Call both functions and print their results.",
"Functions (parameters, return values)\nIs Even Function:\nCreate a function `isEven` that takes an `int` as a parameter and *returns* a `bool` (true if the number is even, false otherwise). Use the modulo operator inside. Call the function with different numbers and print the boolean results.",
"Classes and Objects (inheritance, polymorphism)\nSimple `Car` Class:\nDefine a `Car` class with properties like `make` (String), `model` (String), and `year` (int). Add a method `displayInfo()` that prints the car's details. Create an instance (object) of `Car` and call its `displayInfo()` method.",
"Classes and Objects (inheritance, polymorphism)\n`BankAccount` Class:\nCreate a `BankAccount` class with a `balance` (double) property (initially 0). Add methods `deposit(amount)` and `withdraw(amount)` that modify the balance. Ensure withdrawal doesn't allow negative balance. Create an account object, perform some transactions, and print the final balance.",
"Classes and Objects (inheritance, polymorphism)\nBasic Inheritance (`Animal` -> `Dog`):\nCreate a base class `Animal` with a method `makeSound()` that prints a generic sound. Create a `Dog` class that *inherits* from `Animal` and *overrides* `makeSound()` to print \"Woof!\". Create a `Dog` object and call its `makeSound()` method.",
"Classes and Objects (inheritance, polymorphism)\nShape Hierarchy (Area):\nCreate a base class `Shape` with a method `calculateArea()` that returns 0.0. Create two subclasses, `Circle` (with `radius`) and `Rectangle` (with `width`, `height`), both overriding `calculateArea()` to return their respective areas. Create instances of `Circle` and `Rectangle` and print their areas.",
"Classes and Objects (inheritance, polymorphism)\nPolymorphism with Animals:\nUsing the `Animal` and `Dog` classes from before, create another subclass `Cat` inheriting from `Animal` and overriding `makeSound()` to print \"Meow!\". Create a `List<Animal>` containing a `Dog` object and a `Cat` object. Loop through the list and call `makeSound()` on each element, observing the different outputs (polymorphism).",
"Asynchronous Programming (Futures, async/await)\nSimulated Data Fetch:\nCreate an `async` function `fetchUserData()` that returns a `Future<String>`. Inside, use `Future.delayed` for 2 seconds, then return the string \"User data loaded!\". In your `main` function (marked `async`), call `fetchUserData()` using `await` and print the result.",
"Asynchronous Programming (Futures, async/await)\nDelayed Greeting:\nCreate an `async` function `greetAfterDelay(String name, int seconds)` that returns `Future<void>`. Inside, use `Future.delayed` for the specified `seconds`, then print \"Hello, [name]!\". Call this function from `main` using `await`.",
"Asynchronous Programming (Futures, async/await)\nSequential Async Operations:\nCreate two async functions, `fetchTask1()` and `fetchTask2()`, each returning a `Future<String>` after a different delay (e.g., 1 second, 3 seconds). In `main` (async), `await` `fetchTask1()`, print its result, then `await` `fetchTask2()`, and print its result. Observe the total time taken.",
"Asynchronous Programming (Futures, async/await)\nParallel Async Operations with `Future.wait`:\nUsing the same `fetchTask1()` and `fetchTask2()` from the previous exercise, use `Future.wait` to run them concurrently. `await` the result of `Future.wait` (which is a `List<String>`) and print both results. Observe the reduced total time.",
"Asynchronous Programming (Futures, async/await)\nAsync Operation with Error Handling:\nModify the `fetchUserData()` function to sometimes throw an error (e.g., use a random number check). In `main` (async), wrap the `await fetchUserData()` call in a `try...catch` block to gracefully handle the potential error and print an error message if it occurs, or the data if successful."