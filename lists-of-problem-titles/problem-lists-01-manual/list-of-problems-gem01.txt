# List of problem descriptions
problem_descriptions = [
    "Variables and Data Types (int, double, String, bool, List, Map)\nTemperature Converter:\nAsk the user for a temperature in Celsius (double).\nConvert it to Fahrenheit using the formula: F=(C*9/5)+32.\nPrint the result, showing both Celsius and Fahrenheit values.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nGrocery List:\nCreate a List of grocery items (Strings).\nAdd, remove, and update items in the list.\nPrint the final grocery list.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nStudent Grades:\nCreate a Map to store student names (Strings) and their corresponding grades (ints).\nCalculate the average grade.\nPrint each student's name and grade, and the average grade.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nBoolean Logic Quiz:\nCreate a few boolean variables (true or false).\nUse logical operators (&&, ||, !) to create simple boolean expressions.\nPrint the results of the expressions.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nString Manipulation:\nAsk the user to input a string.\nCalculate the length of the string.\nConvert the string to uppercase and lowercase.\nCheck if the string contains a specific substring.\nPrint all of the results.",
    "Operators (arithmetic, comparison, logical)\nSimple Calculator:\nAsk the user for two numbers and an operator (+, -, *, /).\nPerform the corresponding arithmetic operation and print the result.",
    "Operators (arithmetic, comparison, logical)\nEven or Odd Checker:\nAsk the user for a number.\nUse the modulo operator (%) to determine if the number is even or odd.\nPrint the result.",
    "Operators (arithmetic, comparison, logical)\nAge Comparison:\nAsk the user for their age and another person's age.\nUse comparison operators (>, <, ==) to determine who is older or if they are the same age.\nPrint the comparison result.",
    "Operators (arithmetic, comparison, logical)\nLogical Expression Evaluator:\nDefine several boolean variables.\nCreate complex logical expressions using &&, ||, and !.\nPrint the results of these expressions.",
    "Operators (arithmetic, comparison, logical)\nDiscount Calculator:\nAsk the user for a product price and if they have a discount code (boolean).\nIf they have a discount code, apply a 10% discount.\nCalculate and print the final price.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nGrade Calculator:\nAsk the user for a numerical grade.\nUse if-else statements to assign a letter grade (A, B, C, D, F).\nPrint the letter grade.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nNumber Series:\nUse a for loop to print a series of numbers (e.g., from 1 to 10).\nModify the loop to print only even or odd numbers.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nCountdown Timer:\nAsk the user for a starting number.\nUse a while loop to count down from that number to 0.\nPrint each number in the countdown.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nDay of the Week:\nAsk the user for a number (1-7).\nUse a switch statement to print the corresponding day of the week.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nFactorial Calculator:\nAsk the user for a number.\nUse a for loop to calculate the factorial of that number.\nPrint the result.",
    "Functions (parameters, return values)\nArea of a Rectangle:\nCreate a function that takes the length and width of a rectangle as parameters and returns the area.\nCall the function with different values and print the results.",
    "Functions (parameters, return values)\nSimple Interest Calculator:\nCreate a function that calculates simple interest. The function should take in principle, rate, and time as parameters and return the calculated simple interest.\nCall the function and print the result.",
    "Functions (parameters, return values)\nString Reverser:\nCreate a function that takes a String as a parameter and returns the reversed String.\nCall the function and print the return value.",
    "Functions (parameters, return values)\nMaximum of Three Numbers:\nCreate a function that takes three numbers as parameters and returns the maximum number.\nCall the function and print the result.",
    "Functions (parameters, return values)\nCelsius to Fahrenheit Function:\nCreate a function that takes a Celsius temperature as a parameter and returns the Fahrenheit equivalent.\nCall the function multiple times with different values.",
    "Classes and Objects (inheritance, polymorphism)\nShape Hierarchy:\nCreate a base class Shape with an abstract method area().\nCreate subclasses Circle and Rectangle that inherit from Shape and implement the area() method.\nCreate objects of both subclasses and print their areas.",
    "Classes and Objects (inheritance, polymorphism)\nAnimal Class:\nCreate a base class Animal with a method makeSound().\nCreate subclasses Dog and Cat that override the makeSound() method.\nCreate objects of both subclasses and call their makeSound() methods.",
    "Classes and Objects (inheritance, polymorphism)\nVehicle Class:\nCreate a base class Vehicle with properties like make and model.\nCreate subclasses Car and Motorcycle that inherit from Vehicle.\nCreate objects of each class and display their properties.",
    "Classes and Objects (inheritance, polymorphism)\nEmployee Class:\nCreate a base class Employee with properties like name and salary.\nCreate subclasses Manager and Developer that inherit from Employee.\nAdd specific methods to the subclasses, like manageTeam() for Manager and writeCode() for Developer.",
    "Classes and Objects (inheritance, polymorphism)\nGeometric Calculator:\nCreate a class Geometry with static methods for calculating the area of a circle and a rectangle.\nCall the static methods without creating an instance of the class.",
    "Asynchronous Programming (Futures, async/await)\nSimulated File Download:\nCreate a function that simulates downloading a file using Future.delayed().\nUse async/await to handle the asynchronous operation.\nPrint a message when the download is complete.",
    "Asynchronous Programming (Futures, async/await)\nFetching Data from a Simulated API:\nCreate a function that simulates fetching data from an API using Future.delayed().\nUse async/await to handle the data fetching and print the fetched data.",
    "Asynchronous Programming (Futures, async/await)\nMultiple Futures:\nCreate several functions that return Future objects.\nUse Future.wait() to wait for all the futures to complete.\nPrint the results of all the futures.",
    "Asynchronous Programming (Futures, async/await)\nError Handling with Futures:\nCreate a future that may throw an error.\nUse a try catch block within an async function to catch and handle the error.",
    "Asynchronous Programming (Futures, async/await)\nDelayed String Print:\nCreate a function that waits a random amount of time, and then prints a string.\nCall this function multiple times, and observe the results."
]