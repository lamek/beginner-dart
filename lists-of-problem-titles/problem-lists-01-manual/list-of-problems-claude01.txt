problem_descriptions = [
    "Variables and Data Types (int, double, String, bool, List, Map)\nPersonal Profile:\nCreate variables to store name, age, favorite color (String), height (double), number of siblings (int), and whether you like pizza (bool). Print them in a formatted output.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nShopping Cart:\nCreate a List to store grocery items and another for their prices. Calculate the total cost and print the receipt.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nCountry Information:\nCreate a Map where keys are country names and values are their capitals. Allow users to look up capitals by entering a country name.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nStudent Grades:\nCreate variables to track test scores for different subjects, calculate the average, and assign a letter grade based on the average.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nWeekly Schedule:\nCreate a Map where keys are days of the week and values are Lists of activities planned for that day.",
    "Operators (arithmetic, comparison, logical)\nTemperature Converter:\nCreate a program that converts between Celsius and Fahrenheit using arithmetic operators.",
    "Operators (arithmetic, comparison, logical)\nDiscount Calculator:\nInput an item's price and discount percentage, then calculate and display the final price.",
    "Operators (arithmetic, comparison, logical)\nNumber Comparison:\nTake two numbers as input and use comparison operators to determine which is larger, smaller, or if they're equal.",
    "Operators (arithmetic, comparison, logical)\nLogical Password Checker:\nCreate a simple password validator that checks if a password is at least 8 characters AND contains at least one number OR special character.",
    "Operators (arithmetic, comparison, logical)\nEven/Odd Analyzer:\nWrite a program that determines if a number is even or odd using the modulo operator, and whether it's positive or negative using comparison operators.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nNumber Guessing Game:\nGenerate a random number and use if-else statements to give hints if the user's guess is too high or too low.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nMultiplication Table:\nUse a for loop to generate and display a multiplication table for a given number.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nCountdown Timer:\nUse a while loop to create a simple countdown that prints numbers from a starting value down to 1.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nDay Planner:\nUse a switch statement to suggest activities based on the day of the week input by the user.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nFizzBuzz:\nWrite the classic program where you print numbers from 1 to 100, but for multiples of 3 print 'Fizz', for multiples of 5 print 'Buzz', and for multiples of both print 'FizzBuzz'.",
    "Functions (parameters, return values)\nGreeting Generator:\nCreate a function that takes a name parameter and returns a personalized greeting.",
    "Functions (parameters, return values)\nArea Calculator:\nWrite functions to calculate the area of different shapes (circle, rectangle, triangle) based on input parameters.",
    "Functions (parameters, return values)\nString Transformer:\nCreate a function that takes a string and returns it transformed (e.g., all uppercase, all lowercase, reversed, etc.).",
    "Functions (parameters, return values)\nNumber Analyzer:\nWrite a function that analyzes a list of numbers and returns information like the sum, average, minimum, and maximum values.",
    "Functions (parameters, return values)\nPassword Generator:\nCreate a function that generates random passwords of specified length with options for including uppercase letters, numbers, and special characters.",
    "Classes and Objects (inheritance, polymorphism)\nBank Account:\nCreate a BankAccount class with attributes for owner name and balance, and methods for deposit and withdrawal.",
    "Classes and Objects (inheritance, polymorphism)\nAnimal Hierarchy:\nCreate a base Animal class and derived classes like Cat, Dog, and Bird with inheritance, each with different sounds and behaviors.",
    "Classes and Objects (inheritance, polymorphism)\nShape Calculator:\nCreate a Shape base class with area() method, then create Rectangle, Circle, and Triangle subclasses that override this method.",
    "Classes and Objects (inheritance, polymorphism)\nLibrary System:\nCreate Book and Library classes to model a simple library system where users can checkout and return books.",
    "Classes and Objects (inheritance, polymorphism)\nE-commerce Product:\nCreate a Product class with subclasses for different product types (Electronics, Clothing, etc.) with shared and unique attributes.",
    "Asynchronous Programming (Futures, async/await)\nTimer App:\nCreate a simple countdown timer that updates a display every second using async/await.",
    "Asynchronous Programming (Futures, async/await)\nData Fetcher:\nSimulate fetching data with a Future that completes after a delay, displaying a loading message while waiting.",
    "Asynchronous Programming (Futures, async/await)\nMulti-step Process:\nCreate a sequence of asynchronous operations that must happen in order (like downloading, processing, then displaying data).",
    "Asynchronous Programming (Futures, async/await)\nAPI Request Simulator:\nSimulate making an API request and handling the response using Future and async/await.",
    "Asynchronous Programming (Futures, async/await)\nParallel Tasks:\nCreate multiple asynchronous tasks and use Future.wait to run them in parallel and combine their results."
]