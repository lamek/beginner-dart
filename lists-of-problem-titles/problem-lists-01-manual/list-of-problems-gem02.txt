problem_descriptions = [
    "Variables and Data Types (int, double, String, bool, List, Map)\nTemperature Converter:\nCreate variables to store Celsius and Fahrenheit temperatures. Write code to convert between the two using the formula: F=(C*9/5)+32 and C=(F-32)*5/9. Print the results with appropriate labels.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nGrocery List:\nCreate a List of grocery items (Strings). Add, remove, and update items in the list. Print the final grocery list.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nStudent Grades:\nCreate a Map to store student names (Strings) and their corresponding grades (doubles). Calculate the average grade. Print each student's name and grade, and the average grade.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nBasic Profile:\nCreate variables to store a user's name (String), age (int), height (double), and whether they are a student (bool). Print all of the stored information in a readable format.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nCircle Area:\nStore the radius of a circle in a double variable. Calculate and print the area of the circle using the formula: Area=Ï€*radius^2. (use import 'dart:math'; for pi)",
    "Operators (arithmetic, comparison, logical)\nSimple Calculator:\nTake two numbers as input. Perform addition, subtraction, multiplication, and division using arithmetic operators. Print the results of each operation.",
    "Operators (arithmetic, comparison, logical)\nEven or Odd Checker:\nTake an integer as input. Use the modulo operator (%) to determine if the number is even or odd. Print whether the number is even or odd.",
    "Operators (arithmetic, comparison, logical)\nAge Eligibility:\nTake a user's age as input. Use comparison operators (>, <, >=, <=) to check if the user is eligible to vote (age >= 18). Print a message indicating eligibility.",
    "Operators (arithmetic, comparison, logical)\nLogical Operator Practice:\nTake two boolean inputs. Demonstrate the use of the AND (&&), OR (||), and NOT (!) logical operators. Print the results of the logical operations.",
    "Operators (arithmetic, comparison, logical)\nRange Check:\nTake a number as input. Use comparison and logical operators to check if the number is within a specific range (e.g., between 10 and 50). Print whether the number is in the range or not.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nGrade Classifier:\nTake a student's grade as input. Use if-else statements to classify the grade into categories (e.g., A, B, C, D, F). Print the corresponding grade classification.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nNumber Sequence:\nUse a for loop to print a sequence of numbers (e.g., from 1 to 10). Modify the loop to print only even or odd numbers.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nCountdown Timer:\nUse a while loop to create a countdown timer. Take a starting number as input. Print the numbers counting down to 1.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nDay of the Week:\nTake a number (1-7) representing a day of the week as input. Use a switch statement to print the corresponding day name (e.g., 1 = Monday, 7 = Sunday).",
    "Control Flow (if-else, for loops, while loops, switch statements)\nFactorial Calculator:\nTake an integer as input. Using a for loop, calculate the factorial of the number. Print the result.",
    "Functions (parameters, return values)\nArea Calculator Functions:\nCreate functions to calculate the area of a rectangle and a triangle. Each function should take the necessary parameters (e.g., length and width for rectangle, base and height for triangle). Return the calculated area.",
    "Functions (parameters, return values)\nString Reversal Function:\nCreate a function that takes a String as input and returns the reversed String.",
    "Functions (parameters, return values)\nTemperature Conversion Functions:\nCreate two functions, one to convert Celsius to Fahrenheit and one to convert Fahrenheit to Celsius. Each function should take a double as a parameter and return a double.",
    "Functions (parameters, return values)\nSimple Addition Function:\nCreate a function that takes two integer paramaters. Return the sum of the two integers.",
    "Functions (parameters, return values)\nList Average Function:\nCreate a function that takes a List of doubles as a parameter. Return the average of the numbers in the list.",
    "Classes and Objects (inheritance, polymorphism)\nBasic Shape Classes:\nCreate a base class Shape with an abstract method calculateArea(). Create subclasses Rectangle and Circle that inherit from Shape and implement calculateArea(). Create instances of each subclass and print their areas.",
    "Classes and Objects (inheritance, polymorphism)\nAnimal Hierarchy:\nCreate a base class Animal with a method makeSound(). Create subclasses Dog and Cat that override makeSound() to print their specific sounds. Create a list of animal objects and iterate through the list calling the makeSound method.",
    "Classes and Objects (inheritance, polymorphism)\nVehicle Classes:\nCreate a base class Vehicle with properties like make and model. Create subclasses Car and Motorcycle that inherit from Vehicle and add specific properties. Create instances of each subclass and print their properties.",
    "Classes and Objects (inheritance, polymorphism)\nEmployee Class:\nCreate an Employee class with properties like name, id, and salary. Create methods to update the salary and display employee information.",
    "Classes and Objects (inheritance, polymorphism)\nPoint Class:\nCreate a Point class with x and y coordinates. Create a method to calculate the distance from the origin (0,0).",
    "Asynchronous Programming (Futures, async/await)\nDelayed Greeting:\nUse Future.delayed() to print a greeting message after a specified delay (e.g., 2 seconds).",
    "Asynchronous Programming (Futures, async/await)\nFetching Data (Simulated):\nCreate a function that simulates fetching data from an API using Future.delayed(). Use async/await to handle the asynchronous operation and print the fetched data.",
    "Asynchronous Programming (Futures, async/await)\nMultiple Futures:\nCreate multiple functions that return futures. Use Future.wait() to wait for all futures to complete. Print the results of all the futures.",
    "Asynchronous Programming (Futures, async/await)\nError Handling with Futures:\nCreate a future that simulates a possible error. Use .then() and .catchError() to handle both successful and error cases.",
    "Asynchronous Programming (Futures, async/await)\nSimple File Read (Simulated):\nSimulate reading data from a file using a Future.delayed. Return the file contents as a String. Use async await to print the file contents."
]