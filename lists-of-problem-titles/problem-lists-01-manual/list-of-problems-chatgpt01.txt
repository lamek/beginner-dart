problem_descriptions = [
    "Variables and Data Types (int, double, String, bool, List, Map)\nPersonal Info Formatter:\nAsk the user for their name, age, and favorite number. Store these values in appropriate data types and print them in a formatted string.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nShopping List Manager:\nCreate a List<String> with five grocery items and print each item on a new line.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nStudent Grades Tracker:\nUse a Map<String, double> to store student names and their grades. Print all key-value pairs.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nBoolean Logic Test:\nDefine two boolean variables (isSunny, hasUmbrella). Use them to decide whether the user should go outside.",
    "Variables and Data Types (int, double, String, bool, List, Map)\nSimple Temperature Converter:\nStore a temperature in Celsius as a double, convert it to Fahrenheit, and print the result.",
    "Operators (arithmetic, comparison, logical)\nSimple Calculator:\nPrompt the user for two numbers and an operation (+, -, *, /), then compute and print the result.",
    "Operators (arithmetic, comparison, logical)\nEven or Odd Checker:\nAsk the user for an integer and determine whether it is even or odd using the modulus operator.",
    "Operators (arithmetic, comparison, logical)\nVoting Eligibility:\nTake a user's age as input and check if they are eligible to vote (age >= 18).",
    "Operators (arithmetic, comparison, logical)\nDiscount Calculator:\nGiven an original price and a discount percentage, calculate and display the final price.",
    "Operators (arithmetic, comparison, logical)\nBMI Calculator:\nTake the user's weight (kg) and height (m), then calculate and print their BMI using weight / (height * height).",
    "Control Flow (if-else, for loops, while loops, switch statements)\nFizzBuzz:\nPrint numbers from 1 to 20. If a number is divisible by 3, print 'Fizz'; if by 5, print 'Buzz'; if by both, print 'FizzBuzz'.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nGuess the Number:\nGenerate a random number between 1 and 10, then ask the user to guess it. Use a while loop to keep prompting until they guess correctly.",
    "Control Flow (if-else, for loops, while loops, switch statements)\nDays of the Week:\nUse a switch statement to print a message based on a day number (1 = Monday, 7 = Sunday).",
    "Control Flow (if-else, for loops, while loops, switch statements)\nMultiplication Table:\nUse a for loop to print the multiplication table for a given number (e.g., 5).",
    "Control Flow (if-else, for loops, while loops, switch statements)\nSum of First N Numbers:\nAsk the user for a number N and use a loop to calculate and print the sum of numbers from 1 to N.",
    "Functions (parameters, return values)\nGreeting Function:\nWrite a function greet(String name) that prints 'Hello, [name]!'.",
    "Functions (parameters, return values)\nArea of a Circle:\nCreate a function circleArea(double radius) that returns the area of a circle (π * r^2).",
    "Functions (parameters, return values)\nFind Maximum:\nWrite a function findMax(int a, int b) that returns the greater of two numbers.",
    "Functions (parameters, return values)\nSimple Interest Calculator:\nImplement calculateInterest(double principal, double rate, int time) that returns the simple interest (P * R * T / 100).",
    "Functions (parameters, return values)\nCheck Prime Number:\nWrite a function isPrime(int num) that returns true if the number is prime and false otherwise.",
    "Classes and Objects (inheritance, polymorphism)\nCar Class:\nDefine a Car class with attributes (make, model, year). Create an object and print its details.",
    "Classes and Objects (inheritance, polymorphism)\nBank Account:\nCreate a BankAccount class with deposit() and withdraw() methods. Ensure the balance doesn’t go negative.",
    "Classes and Objects (inheritance, polymorphism)\nStudent Grade System:\nDefine a Student class with a method to calculate and return the average of three grades.",
    "Classes and Objects (inheritance, polymorphism)\nShape Inheritance:\nCreate a Shape base class with an area() method, then subclass it as Circle and Rectangle, overriding the method.",
    "Classes and Objects (inheritance, polymorphism)\nAnimal Polymorphism:\nDefine an Animal class with a makeSound() method, then subclass Dog and Cat with unique sounds.",
    "Asynchronous Programming (Futures, async/await)\nDelayed Greeting:\nWrite a function that prints 'Hello!' after a 2-second delay using Future.delayed().",
    "Asynchronous Programming (Futures, async/await)\nFake API Call:\nSimulate an API call that fetches a user's data after 3 seconds using Future<String> fetchUserData().",
    "Asynchronous Programming (Futures, async/await)\nCountdown Timer:\nCreate an async function that counts down from 5 to 1 with a 1-second delay between each number.",
    "Asynchronous Programming (Futures, async/await)\nFile Download Simulation:\nUse Future to simulate a file download with progress messages ('Downloading...', '50% complete', 'Download complete').",
    "Asynchronous Programming (Futures, async/await)\nParallel Tasks:\nRun two async tasks (fetchWeather() and fetchNews()) in parallel using Future.wait() and print both results."
]